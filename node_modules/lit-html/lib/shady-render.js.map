{"version":3,"file":"shady-render.js","sourceRoot":"","sources":["../src/lib/shady-render.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,MAAM,IAAI,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAiB,MAAM,gBAAgB,CAAC;AAE9F,OAAO,EAAC,IAAI,EAAE,GAAG,EAAE,cAAc,EAAC,MAAM,gBAAgB,CAAC;AAQzD,MAAM,oBAAoB,GAAG,CAAC,SAAiB,EAAE,EAAE,CAC/C,CAAC,MAAsB,EAAE,EAAE;IACzB,MAAM,QAAQ,GAAG,GAAG,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;IAChD,IAAI,aAAa,GAAG,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjD,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;QAChC,aAAa,GAAG,IAAI,GAAG,EAAkC,CAAC;QAC1D,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;IACD,IAAI,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACjD,EAAE,CAAC,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;QAC3B,MAAM,OAAO,GAAG,MAAM,CAAC,kBAAkB,EAAE,CAAC;QAE5C,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACtD,CAAC;QAED,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACzC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEN,MAAM,iBACF,MAAsB,EACtB,SAAmC,EACnC,SAAiB;IACnB,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC;AACxE,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {render as baseRender, Template, templateCaches, TemplateResult} from '../lit-html.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\ndeclare global {\n  interface Window {\n    ShadyCSS: any;\n  }\n}\n\nconst shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = `${result.type}--${scopeName}`;\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = new Map<TemplateStringsArray, Template>();\n        templateCaches.set(cacheKey, templateCache);\n      }\n      let template = templateCache.get(result.strings);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n\n        if (typeof window.ShadyCSS === 'object') {\n          window.ShadyCSS.prepareTemplate(element, scopeName);\n        }\n\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n      }\n      return template;\n    };\n\nexport function render(\n    result: TemplateResult,\n    container: Element|DocumentFragment,\n    scopeName: string) {\n  return baseRender(result, container, shadyTemplateFactory(scopeName));\n}\n"]}