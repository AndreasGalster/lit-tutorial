{"version":3,"file":"async-append.js","sourceRoot":"","sources":["../src/lib/async-append.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;AAEH,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AAEnD;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CACvB,KAAuB,EAAE,MAAsC,EAAE,EAAE,CACnE,SAAS,CAAC,KAAK,EAAE,IAAc,EAAE,EAAE;IACjC,kEAAkE;IAClE,kBAAkB;IAClB,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC;IACT,CAAC;IACD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAE5B,gEAAgE;IAChE,gDAAgD;IAChD,IAAI,QAAQ,CAAC;IACb,IAAI,CAAC,GAAG,CAAC,CAAC;;QAEV,GAAG,CAAC,CAAgB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;YAAd,IAAI,CAAC,wBAAA,CAAA;YACd,uEAAuE;YACvE,yCAAyC;YACzC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,CAAC;YAED,kEAAkE;YAClE,+DAA+D;YAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,KAAK,CAAC,CAAC,CAAC;gBAClC,KAAK,CAAC;YACR,CAAC;YAED,yDAAyD;YACzD,kEAAkE;YAClE,iEAAiE;YACjE,sCAAsC;YACtC,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;gBACzB,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnB,CAAC;YAED,iEAAiE;YACjE,qDAAqD;YACrD,+DAA+D;YAC/D,+DAA+D;YAC/D,6DAA6D;YAC7D,yBAAyB;YAEzB,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;YAEnC,mDAAmD;YACnD,EAAE,CAAC,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC3B,4DAA4D;gBAC5D,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;gBAC5C,4DAA4D;gBAC5D,yDAAyD;gBACzD,aAAa;gBACb,QAAQ,CAAC,OAAO,GAAG,aAAa,CAAC;gBACjC,IAAI,CAAC,OAAO,CAAC,UAAW,CAAC,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACrE,CAAC;YACD,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACpE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC,EAAE,CAAC;SACL;;;;;;;;;;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {directive, NodePart} from '../lit-html.js';\n\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncAppend = <T>(\n    value: AsyncIterable<T>, mapper?: (v: T, index?: number) => any) =>\n    directive(async (part: NodePart) => {\n      // If we've already set up this particular iterable, we don't need\n      // to do anything.\n      if (value === part._previousValue) {\n        return;\n      }\n      part._previousValue = value;\n\n      // We keep track of item Parts across iterations, so that we can\n      // share marker nodes between consecutive Parts.\n      let itemPart;\n      let i = 0;\n\n      for await (let v of value) {\n        // When we get the first value, clear the part. This let's the previous\n        // value display until we can replace it.\n        if (i === 0) {\n          part.clear();\n        }\n\n        // Check to make sure that value is the still the current value of\n        // the part, and if not bail because a new value owns this part\n        if (part._previousValue !== value) {\n          break;\n        }\n\n        // As a convenience, because functional-programming-style\n        // transforms of iterables and async iterables requires a library,\n        // we accept a mapper function. This is especially convenient for\n        // rendering a template for each item.\n        if (mapper !== undefined) {\n          v = mapper(v, i);\n        }\n\n        // Like with sync iterables, each item induces a Part, so we need\n        // to keep track of start and end nodes for the Part.\n        // Note: Because these Parts are not updatable like with a sync\n        // iterable (if we render a new value, we always clear), it may\n        // be possible to optimize away the Parts and just re-use the\n        // Part.setValue() logic.\n\n        let itemStartNode = part.startNode;\n\n        // Check to see if we have a previous item and Part\n        if (itemPart !== undefined) {\n          // Create a new node to separate the previous and next Parts\n          itemStartNode = document.createTextNode('');\n          // itemPart is currently the Part for the previous item. Set\n          // it's endNode to the node we'll use for the next Part's\n          // startNode.\n          itemPart.endNode = itemStartNode;\n          part.endNode.parentNode!.insertBefore(itemStartNode, part.endNode);\n        }\n        itemPart = new NodePart(part.instance, itemStartNode, part.endNode);\n        itemPart.setValue(v);\n        i++;\n      }\n    });\n"]}